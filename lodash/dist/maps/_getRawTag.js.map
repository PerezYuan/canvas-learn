{"version":3,"sources":["_getRawTag.js"],"names":["objectProto","Object","prototype","hasOwnProperty","nativeObjectToString","toString","symToStringTag","toStringTag","undefined","getRawTag","value","isOwn","call","tag","unmasked","e","result"],"mappings":";;;;;;AAAA;;;;;;AAEA;AACA,IAAIA,cAAcC,OAAOC,SAAzB;;AAEA;AACA,IAAIC,iBAAiBH,YAAYG,cAAjC;;AAEA;;;;;AAKA,IAAIC,uBAAuBJ,YAAYK,QAAvC;;AAEA;AACA,IAAIC,iBAAiB,mBAAS,iBAAOC,WAAhB,GAA8BC,SAAnD;;AAEA;;;;;;;AAOA,SAASC,SAAT,CAAmBC,KAAnB,EAA0B;AACxB,MAAIC,QAAQR,eAAeS,IAAf,CAAoBF,KAApB,EAA2BJ,cAA3B,CAAZ;AAAA,MACIO,MAAMH,MAAMJ,cAAN,CADV;;AAGA,MAAI;AACFI,UAAMJ,cAAN,IAAwBE,SAAxB;AACA,QAAIM,WAAW,IAAf;AACD,GAHD,CAGE,OAAOC,CAAP,EAAU,CAAE;;AAEd,MAAIC,SAASZ,qBAAqBQ,IAArB,CAA0BF,KAA1B,CAAb;AACA,MAAII,QAAJ,EAAc;AACZ,QAAIH,KAAJ,EAAW;AACTD,YAAMJ,cAAN,IAAwBO,GAAxB;AACD,KAFD,MAEO;AACL,aAAOH,MAAMJ,cAAN,CAAP;AACD;AACF;AACD,SAAOU,MAAP;AACD;;kBAEcP,S","file":"../_getRawTag.js","sourcesContent":["import Symbol from './_Symbol.js';\r\n\r\n/** Used for built-in method references. */\r\nvar objectProto = Object.prototype;\r\n\r\n/** Used to check objects for own properties. */\r\nvar hasOwnProperty = objectProto.hasOwnProperty;\r\n\r\n/**\r\n * Used to resolve the\r\n * [`toStringTag`](http://ecma-international.org/ecma-262/7.0/#sec-object.prototype.tostring)\r\n * of values.\r\n */\r\nvar nativeObjectToString = objectProto.toString;\r\n\r\n/** Built-in value references. */\r\nvar symToStringTag = Symbol ? Symbol.toStringTag : undefined;\r\n\r\n/**\r\n * A specialized version of `baseGetTag` which ignores `Symbol.toStringTag` values.\r\n *\r\n * @private\r\n * @param {*} value The value to query.\r\n * @returns {string} Returns the raw `toStringTag`.\r\n */\r\nfunction getRawTag(value) {\r\n  var isOwn = hasOwnProperty.call(value, symToStringTag),\r\n      tag = value[symToStringTag];\r\n\r\n  try {\r\n    value[symToStringTag] = undefined;\r\n    var unmasked = true;\r\n  } catch (e) {}\r\n\r\n  var result = nativeObjectToString.call(value);\r\n  if (unmasked) {\r\n    if (isOwn) {\r\n      value[symToStringTag] = tag;\r\n    } else {\r\n      delete value[symToStringTag];\r\n    }\r\n  }\r\n  return result;\r\n}\r\n\r\nexport default getRawTag;\r\n"]}