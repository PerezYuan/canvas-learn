{"version":3,"sources":["isSymbol.js"],"names":["symbolTag","isSymbol","value"],"mappings":";;;;;;;;AAAA;;;;AACA;;;;;;AAEA;AACA,IAAIA,YAAY,iBAAhB;;AAEA;;;;;;;;;;;;;;;;;AAiBA,SAASC,QAAT,CAAkBC,KAAlB,EAAyB;AACvB,SAAO,QAAOA,KAAP,yCAAOA,KAAP,MAAgB,QAAhB,IACJ,4BAAaA,KAAb,KAAuB,0BAAWA,KAAX,KAAqBF,SAD/C;AAED;;kBAEcC,Q","file":"../isSymbol.js","sourcesContent":["import baseGetTag from './_baseGetTag.js';\r\nimport isObjectLike from './isObjectLike.js';\r\n\r\n/** `Object#toString` result references. */\r\nvar symbolTag = '[object Symbol]';\r\n\r\n/**\r\n * Checks if `value` is classified as a `Symbol` primitive or object.\r\n *\r\n * @static\r\n * @memberOf _\r\n * @since 4.0.0\r\n * @category Lang\r\n * @param {*} value The value to check.\r\n * @returns {boolean} Returns `true` if `value` is a symbol, else `false`.\r\n * @example\r\n *\r\n * _.isSymbol(Symbol.iterator);\r\n * // => true\r\n *\r\n * _.isSymbol('abc');\r\n * // => false\r\n */\r\nfunction isSymbol(value) {\r\n  return typeof value == 'symbol' ||\r\n    (isObjectLike(value) && baseGetTag(value) == symbolTag);\r\n}\r\n\r\nexport default isSymbol;\r\n"]}